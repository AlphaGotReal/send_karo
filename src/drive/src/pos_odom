#! /usr/bin/python3.9

import rospy
from std_msgs.msg import Float64
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Pose, Twist, Quaternion
import math
from math import e

class WheelOdometry:

    def __init__(self):
        rospy.init_node('wheel_odometry', anonymous=True)
        self.enc_vel_tm1 = 0.0
        self.enc_vel_tm2 = 0.0
        self.enc_pos_tm1 = 0.0
        self.enc_pos_tm2 = 0.0
        
        self.prev_time = rospy.Time.now()
        self.odom_pub = rospy.Publisher('/odom', Odometry, queue_size=10)  # Publish to /odom
        self.avg_vel_pub = rospy.Publisher("/avg_vel", Float64, queue_size=1)
        self.avg_angle_pub = rospy.Publisher("/avg_angle", Float64, queue_size=1)
        
        self.odom = Odometry()
        self.odom.header.frame_id = "odom"
        self.odom.child_frame_id = "base_footprint"
        self.pose = Pose()
        self.twist = Twist()

        self.distance = [0, 0] #left wheel, right wheel
        self.prev_position = [0, 0] #x, y coor

        self.x = [0, 0] #left x, right x
        self.y = [0, 0] #left y, right y

        self.wheel_distance = 0.68#0.76  # Distance between wheels (assumed value)
        self.wheel_radius = 0.19  # Radius of each wheel (assumed value)
        
        rospy.Subscriber('encoder_vel_tm1', Float64, self.enc_tm1_callback)
        rospy.Subscriber('encoder_vel_tm2', Float64, self.enc_tm2_callback)
        rospy.Subscriber('encoder_pos_tm1', Float64, self.enc_pos_tm1_callback)
        rospy.Subscriber('encoder_pos_tm2', Float64, self.enc_pos_tm2_callback)

    def enc_tm1_callback(self, data):
        self.enc_vel_tm1 = data.data

    def enc_tm2_callback(self, data):
        self.enc_vel_tm2 = data.data
        
    def enc_pos_tm1_callback(self, data):
        self.enc_pos_tm1 = data.data
        
    def enc_pos_tm2_callback(self, data):
        self.enc_pos_tm2 = data.data

    def calculate_wheel_odometry(self):
      
        current_time = rospy.Time.now()
        dt = (current_time - self.prev_time).to_sec()

        # Use position values instead of velocity
        right = -self.enc_pos_tm1 * 0.0010362
        left = self.enc_pos_tm2 * 0.0010362

        bot_steer = (left - right)/self.wheel_distance
        
        dleft = left - self.distance[0]
        dright = right - self.distance[1]

        self.x[0] += dleft * math.cos(bot_steer)
        self.x[1] += dright * math.cos(bot_steer)

        self.y[0] += dleft * math.sin(bot_steer)
        self.y[1] += dright * math.sin(bot_steer)

        self.distance = [left, right]

        x = (self.x[0] + self.x[1])/2
        y = (self.y[0] + self.y[1])/2

        print(x, y)

        self.pose.position.x = x
        self.pose.position.y = y
        self.pose.position.z = 0

        self.pose.orientation = Quaternion(0, 0, math.sin(bot_steer/2), math.cos(bot_steer/2))

        # Update header
        self.odom.header.stamp = current_time
        self.prev_time = current_time
        
    def publish_wheel_odometry(self):
        self.calculate_wheel_odometry()
        self.odom.pose.pose = self.pose
        self.odom.twist.twist = self.twist
        self.odom_pub.publish(self.odom)

    def main(self):
        rospy.loginfo("Wheel Odometry Node started.")
        rate = rospy.Rate(50)  # 50 Hz
        while not rospy.is_shutdown():
            self.publish_wheel_odometry()
            rate.sleep()

if __name__ == '__main__':
    try:
        wheel_odometry = WheelOdometry()
        wheel_odometry.main()
    except rospy.ROSInterruptException:
        pass


