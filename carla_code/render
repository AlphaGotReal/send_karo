#! /usr/bin/python3

import os
import random 
import cv2
import numpy as np

import carla

client = carla.Client("127.0.0.1", 2000)
world = client.get_world()

settings = world.get_settings()
settings.synchronous_mode = True 
settings.fixed_delta_seconds = 0.05
world.apply_settings(settings)

traffic_manager = client.get_trafficmanager()
traffic_manager.set_synchronous_mode(True)

traffic_manager.set_random_device_seed(0)
random.seed(0)

spectator = world.get_spectator()

spawn_points = world.get_map().get_spawn_points()

models = ['dodge', 'audi', 'model3', 'mini', 'mustang', 'lincoln', 'prius', 'nissan', 'crown', 'impala']
blueprints = []
for vehicle in world.get_blueprint_library().filter("*vehicle*"):
    if any(model in vehicle.id for model in models):
        blueprints.append(vehicle)

max_vehicles = 50
max_vehicles = min(max_vehicles, len(spawn_points))
vehicles = []

for t, spawn_point in enumerate(random.sample(spawn_points, max_vehicles)):
    vehicle = world.try_spawn_actor(random.choice(blueprints), spawn_point)
    if vehicle is not None:
        vehicles.append(vehicle)

for vehicle in vehicles:
    vehicle.set_autopilot(True)
    traffic_manager.ignore_lights_percentage(vehicle, random.randint(0, 50))

class ControlObject(object):

    def __init__(self, vehicle):

        self.vehicle = vehicle
        self.control = carla.VehicleControl()

        """
        
            control attributes

            throttle -> [0, 1]
            break -> [0, 1]
            reverse -> {True, False}
            steer -> [-1, 1]
            gear -> rather not use it

        """

    def set_attributes(self, params:dict):

        self.control.throttle = params['throttle']
        self.control.brake = params['break']
        self.control.reverse = params['reverse']
        self.control.steer = params['steer']

    def __call__(self):

        self.vehicle.apply_control(self.control)

def render(image):

    print(image.shape)

    frame = np.reshape(np.copy(image.raw_data),(image_height, image_width, 4))
    cv2.imshow("frame", frame)

# our vehicle
ego_vehicle = random.choice(vehicles)
ego_vehicle.set_autopilot(False)

camera_init_trans = carla.Transform(carla.Location(x=0, y=0, z=0), carla.Rotation(pitch=0))
camera_bp = world.get_blueprint_library().find("sensor.camera.rgb")
camera = world.spawn_actor(camera_bp, camera_init_trans, attach_to=ego_vehicle)

camera.listen(render)
image_width = camera_bp.get_attribute("image_size_x").as_int()
image_height = camera_bp.get_attribute("image_size_y").as_int()

def exitRender():
    global camera
    
    camera.stop()
    os.sys.exit(1)

while cv2.waitKey(1) != ord('7'):

    try:

        pass

    except Exception as e:
        print(f"{type(e)}: {e}")
        exitRender()

    except KeyboardInterrupt:
        exitRender()

exitRender()



